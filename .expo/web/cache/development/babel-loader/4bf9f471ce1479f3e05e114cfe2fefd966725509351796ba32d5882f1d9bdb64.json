{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button, Text } from 'react-native-paper';\nimport * as DocumentPicker from 'expo-document-picker';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function UploadPdfScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    fileName = _useState2[0],\n    setFileName = _useState2[1];\n  var pick = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var res = yield DocumentPicker.getDocumentAsync({\n        type: 'application/pdf'\n      });\n      if (res.type === 'success') setFileName(res.name);\n    });\n    return function pick() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      mode: \"outlined\",\n      onPress: pick,\n      style: {\n        marginBottom: 12\n      },\n      children: \"Select PDF\"\n    }), _jsx(Text, {\n      children: fileName != null ? fileName : 'No file selected'\n    }), _jsx(Button, {\n      mode: \"contained\",\n      style: {\n        marginTop: 12\n      },\n      onPress: function onPress() {\n        return alert('Upload stub');\n      },\n      children: \"Upload (stub)\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  }\n});","map":{"version":3,"names":["React","useState","View","StyleSheet","Button","Text","DocumentPicker","jsx","_jsx","jsxs","_jsxs","UploadPdfScreen","_useState","_useState2","_slicedToArray","fileName","setFileName","pick","_ref","_asyncToGenerator","res","getDocumentAsync","type","name","apply","arguments","style","styles","container","children","mode","onPress","marginBottom","marginTop","alert","create","flex","padding"],"sources":["C:/Users/sumanth/Downloads/app/src/screens/UploadPdfScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport { Button, Text } from 'react-native-paper';\r\nimport * as DocumentPicker from 'expo-document-picker';\r\n\r\nexport default function UploadPdfScreen() {\r\n  const [fileName, setFileName] = useState<string | null>(null);\r\n\r\n  const pick = async () => {\r\n    const res = await DocumentPicker.getDocumentAsync({ type: 'application/pdf' });\r\n    if (res.type === 'success') setFileName(res.name);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button mode=\"outlined\" onPress={pick} style={{ marginBottom: 12 }}>\r\n        Select PDF\r\n      </Button>\r\n      <Text>{fileName ?? 'No file selected'}</Text>\r\n      <Button mode=\"contained\" style={{ marginTop: 12 }} onPress={() => alert('Upload stub')}>\r\n        Upload (stub)\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({ container: { flex: 1, padding: 16 } });\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAExC,SAASC,MAAM,EAAEC,IAAI,QAAQ,oBAAoB;AACjD,OAAO,KAAKC,cAAc,MAAM,sBAAsB;AAAC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEvD,eAAe,SAASC,eAAeA,CAAA,EAAG;EACxC,IAAAC,SAAA,GAAgCX,QAAQ,CAAgB,IAAI,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtDG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,IAAI;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MACvB,IAAMC,GAAG,SAASd,cAAc,CAACe,gBAAgB,CAAC;QAAEC,IAAI,EAAE;MAAkB,CAAC,CAAC;MAC9E,IAAIF,GAAG,CAACE,IAAI,KAAK,SAAS,EAAEN,WAAW,CAACI,GAAG,CAACG,IAAI,CAAC;IACnD,CAAC;IAAA,gBAHKN,IAAIA,CAAA;MAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;IAAA;EAAA,GAGT;EAED,OACEf,KAAA,CAACR,IAAI;IAACwB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BrB,IAAA,CAACJ,MAAM;MAAC0B,IAAI,EAAC,UAAU;MAACC,OAAO,EAAEd,IAAK;MAACS,KAAK,EAAE;QAAEM,YAAY,EAAE;MAAG,CAAE;MAAAH,QAAA,EAAC;IAEpE,CAAQ,CAAC,EACTrB,IAAA,CAACH,IAAI;MAAAwB,QAAA,EAAEd,QAAQ,WAARA,QAAQ,GAAI;IAAkB,CAAO,CAAC,EAC7CP,IAAA,CAACJ,MAAM;MAAC0B,IAAI,EAAC,WAAW;MAACJ,KAAK,EAAE;QAAEO,SAAS,EAAE;MAAG,CAAE;MAACF,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQG,KAAK,CAAC,aAAa,CAAC;MAAA,CAAC;MAAAL,QAAA,EAAC;IAExF,CAAQ,CAAC;EAAA,CACL,CAAC;AAEX;AAEA,IAAMF,MAAM,GAAGxB,UAAU,CAACgC,MAAM,CAAC;EAAEP,SAAS,EAAE;IAAEQ,IAAI,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAG;AAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}