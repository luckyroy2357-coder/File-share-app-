{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{CodedError,Platform,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font.types\";import{getAssetForSource,loadSingleFontAsync}from\"./FontLoader\";import{isLoadedInCache,isLoadedNative,loadPromises,markLoaded,purgeCache,purgeFontFamilyFromCache}from\"./memory\";import{registerStaticFont}from\"./server\";export function isLoaded(fontFamily){if(Platform.OS==='web'){if(typeof ExpoFontLoader.isLoaded!=='function'){throw new Error(\"expected ExpoFontLoader.isLoaded to be a function, was \"+typeof ExpoFontLoader.isLoaded);}return isLoadedInCache(fontFamily)||ExpoFontLoader.isLoaded(fontFamily);}return isLoadedNative(fontFamily);}export function getLoadedFonts(){return ExpoFontLoader.getLoadedFonts();}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(fontFamilyOrFontMap,source){var isServer=Platform.OS==='web'&&typeof window==='undefined';if(typeof fontFamilyOrFontMap==='object'){if(source){return Promise.reject(new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided source: \"+source+\". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\"));}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);if(isServer){names.map(function(name){return registerStaticFont(name,fontMap[name]);});return Promise.resolve();}return Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})).then(function(){});}if(isServer){registerStaticFont(fontFamilyOrFontMap,source);return Promise.resolve();}return loadFontInNamespaceAsync(fontFamilyOrFontMap,source);}function loadFontInNamespaceAsync(_x,_x2){return _loadFontInNamespaceAsync.apply(this,arguments);}function _loadFontInNamespaceAsync(){_loadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,source){if(!source){throw new CodedError(\"ERR_FONT_SOURCE\",\"Cannot load null or undefined font source: { \\\"\"+fontFamily+\"\\\": \"+source+\" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\"+fontFamily+\"\\\"\");}if(isLoaded(fontFamily)){return;}if(loadPromises.hasOwnProperty(fontFamily)){return loadPromises[fontFamily];}var asset=getAssetForSource(source);loadPromises[fontFamily]=_asyncToGenerator(function*(){try{yield loadSingleFontAsync(fontFamily,asset);markLoaded(fontFamily);}finally{delete loadPromises[fontFamily];}})();yield loadPromises[fontFamily];});return _loadFontInNamespaceAsync.apply(this,arguments);}export function unloadAllAsync(){return _unloadAllAsync.apply(this,arguments);}function _unloadAllAsync(){_unloadAllAsync=_asyncToGenerator(function*(){if(!ExpoFontLoader.unloadAllAsync){throw new UnavailabilityError('expo-font','unloadAllAsync');}if(Object.keys(loadPromises).length){throw new CodedError(\"ERR_UNLOAD\",\"Cannot unload fonts while they're still loading: \"+Object.keys(loadPromises).join(', '));}purgeCache();yield ExpoFontLoader.unloadAllAsync();});return _unloadAllAsync.apply(this,arguments);}export function unloadAsync(_x3,_x4){return _unloadAsync.apply(this,arguments);}function _unloadAsync(){_unloadAsync=_asyncToGenerator(function*(fontFamilyOrFontMap,options){if(!ExpoFontLoader.unloadAsync){throw new UnavailabilityError('expo-font','unloadAsync');}if(typeof fontFamilyOrFontMap==='object'){if(options){throw new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided options: \"+options+\". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);yield Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);}));return;}return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap,options);});return _unloadAsync.apply(this,arguments);}function unloadFontInNamespaceAsync(_x5,_x6){return _unloadFontInNamespaceAsync.apply(this,arguments);}function _unloadFontInNamespaceAsync(){_unloadFontInNamespaceAsync=_asyncToGenerator(function*(fontFamily,options){if(!isLoaded(fontFamily)){return;}else{purgeFontFamilyFromCache(fontFamily);}if(!fontFamily){throw new CodedError(\"ERR_FONT_FAMILY\",\"Cannot unload an empty name\");}if(!ExpoFontLoader.unloadAsync){throw new UnavailabilityError('expo-font','unloadAsync');}yield ExpoFontLoader.unloadAsync(fontFamily,options);});return _unloadFontInNamespaceAsync.apply(this,arguments);}export{FontDisplay};","map":{"version":3,"names":["CodedError","Platform","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","isLoadedInCache","isLoadedNative","loadPromises","markLoaded","purgeCache","purgeFontFamilyFromCache","registerStaticFont","isLoaded","fontFamily","OS","Error","getLoadedFonts","isLoading","loadAsync","fontFamilyOrFontMap","source","isServer","window","Promise","reject","fontMap","names","Object","keys","map","name","resolve","all","loadFontInNamespaceAsync","then","_x","_x2","_loadFontInNamespaceAsync","apply","arguments","_asyncToGenerator","hasOwnProperty","asset","unloadAllAsync","_unloadAllAsync","length","join","unloadAsync","_x3","_x4","_unloadAsync","options","unloadFontInNamespaceAsync","_x5","_x6","_unloadFontInNamespaceAsync"],"sources":["C:\\Users\\sumanth\\Downloads\\app\\node_modules\\expo-font\\src\\Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\nimport {\n  isLoadedInCache,\n  isLoadedNative,\n  loadPromises,\n  markLoaded,\n  purgeCache,\n  purgeFontFamilyFromCache,\n} from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    if (typeof ExpoFontLoader.isLoaded !== 'function') {\n      throw new Error(\n        `expected ExpoFontLoader.isLoaded to be a function, was ${typeof ExpoFontLoader.isLoaded}`\n      );\n    }\n    return isLoadedInCache(fontFamily) || ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return isLoadedNative(fontFamily);\n}\n\n/**\n * Synchronously get all the fonts that have been loaded.\n * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n *\n * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n */\nexport function getLoadedFonts(): string[] {\n  return ExpoFontLoader.getLoadedFonts();\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * An efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * > **Note**: We recommend using the [config plugin](#configuration-in-app-config) instead whenever possible.\n *\n * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n * with React Native `Text` elements.\n * @param source The font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  // we consult the native module to see if the font is already loaded\n  // this is slower than checking the cache but can help avoid loading the same font n times\n  if (isLoaded(fontFamily)) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      markLoaded(fontFamily);\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n * @hidden\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n  purgeCache();\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * This is used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n * @hidden\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!isLoaded(fontFamily)) {\n    return;\n  } else {\n    purgeFontFamilyFromCache(fontFamily);\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!fontFamily) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  await ExpoFontLoader.unloadAsync(fontFamily, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}