{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{loadAsync,isLoaded}from\"./Font\";function isMapLoaded(map){if(typeof map==='string'){return isLoaded(map);}else{return Object.keys(map).every(function(fontFamily){return isLoaded(fontFamily);});}}function useRuntimeFonts(map){var _useState=useState(isMapLoaded(map)),_useState2=_slicedToArray(_useState,2),loaded=_useState2[0],setLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){var isMounted=true;loadAsync(map).then(function(){if(isMounted){setLoaded(true);}}).catch(function(error){if(isMounted){setError(error);}});return function(){isMounted=false;};},[]);return[loaded,error];}function useStaticFonts(map){loadAsync(map);return[true,null];}export var useFonts=typeof window==='undefined'?useStaticFonts:useRuntimeFonts;","map":{"version":3,"names":["useEffect","useState","loadAsync","isLoaded","isMapLoaded","map","Object","keys","every","fontFamily","useRuntimeFonts","_useState","_useState2","_slicedToArray","loaded","setLoaded","_useState3","_useState4","error","setError","isMounted","then","catch","useStaticFonts","useFonts","window"],"sources":["C:\\Users\\sumanth\\Downloads\\app\\node_modules\\expo-font\\src\\FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    loadAsync(map)\n      .then(() => {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      })\n      .catch((error) => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * Load a map of fonts at runtime with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n *\n * @example\n * ```tsx\n * const [loaded, error] = useFonts({\n *   'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n * });\n * ```\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":"iEAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAASC,SAAS,CAAEC,QAAQ,cAG5B,QAAS,CAAAC,WAAWA,CAACC,GAAwC,EAC3D,GAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CAC3B,MAAO,CAAAF,QAAQ,CAACE,GAAG,CAAC,CACtB,CAAC,IAAM,CACL,MAAO,CAAAC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,KAAK,CAAC,SAACC,UAAU,QAAK,CAAAN,QAAQ,CAACM,UAAU,CAAC,GAAC,CACrE,CACF,CAEA,QAAS,CAAAC,eAAeA,CAACL,GAAwC,EAC/D,IAAAM,SAAA,CAA4BV,QAAQ,CAGlCG,WAAW,CAACC,GAAG,CAAC,CACjB,CAAAO,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAJMG,MAAM,CAAAF,UAAA,IAAEG,SAAS,CAAAH,UAAA,IAKxB,IAAAI,UAAA,CAA0Bf,QAAQ,CAAe,IAAI,CAAC,CAAAgB,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA/CE,KAAK,CAAAD,UAAA,IAAEE,QAAQ,CAAAF,UAAA,IAEtBjB,SAAS,CAAC,UAAK,CACb,GAAI,CAAAoB,SAAS,CAAG,IAAI,CAEpBlB,SAAS,CAACG,GAAG,CAAC,CACXgB,IAAI,CAAC,UAAK,CACT,GAAID,SAAS,CAAE,CACbL,SAAS,CAAC,IAAI,CAAC,CACjB,CACF,CAAC,CAAC,CACDO,KAAK,CAAC,SAACJ,KAAK,CAAI,CACf,GAAIE,SAAS,CAAE,CACbD,QAAQ,CAACD,KAAK,CAAC,CACjB,CACF,CAAC,CAAC,CAEJ,MAAO,WAAK,CACVE,SAAS,CAAG,KAAK,CACnB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACN,MAAM,CAAEI,KAAK,CAAC,CACxB,CAEA,QAAS,CAAAK,cAAcA,CAAClB,GAAwC,EAC9DH,SAAS,CAACG,GAAG,CAAC,CACd,MAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACrB,CAwBA,MAAO,IAAM,CAAAmB,QAAQ,CACnB,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAGF,cAAc,CAAGb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}