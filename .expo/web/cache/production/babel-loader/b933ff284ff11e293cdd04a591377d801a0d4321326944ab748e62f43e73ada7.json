{"ast":null,"code":"import{CodedError,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{getAssetForSource,loadSingleFontAsync}from\"./FontLoader\";export function getServerResources(){if(!ExpoFontLoader.getServerResources){throw new UnavailabilityError('expo-font','getServerResources');}return ExpoFontLoader.getServerResources();}export function resetServerContext(){if(!ExpoFontLoader.resetServerContext){throw new UnavailabilityError('expo-font','resetServerContext');}return ExpoFontLoader.resetServerContext();}export function registerStaticFont(fontFamily,source){if(!source){throw new CodedError(\"ERR_FONT_SOURCE\",\"Cannot load null or undefined font source: { \\\"\"+fontFamily+\"\\\": \"+source+\" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\"+fontFamily+\"\\\"\");}var asset=getAssetForSource(source);loadSingleFontAsync(fontFamily,asset);}","map":{"version":3,"names":["CodedError","UnavailabilityError","ExpoFontLoader","getAssetForSource","loadSingleFontAsync","getServerResources","resetServerContext","registerStaticFont","fontFamily","source","asset"],"sources":["C:\\Users\\sumanth\\Downloads\\app\\node_modules\\expo-font\\src\\server.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontSource } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\n\n/**\n * @returns the server resources that should be statically extracted.\n * @private\n */\nexport function getServerResources(): string[] {\n  if (!ExpoFontLoader.getServerResources) {\n    throw new UnavailabilityError('expo-font', 'getServerResources');\n  }\n  return ExpoFontLoader.getServerResources();\n}\n\n/**\n * @returns clear the server resources from the global scope.\n * @private\n */\nexport function resetServerContext() {\n  if (!ExpoFontLoader.resetServerContext) {\n    throw new UnavailabilityError('expo-font', 'resetServerContext');\n  }\n  return ExpoFontLoader.resetServerContext();\n}\n\nexport function registerStaticFont(fontFamily: string, source?: FontSource | null) {\n  // MUST BE A SYNC FUNCTION!\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n  const asset = getAssetForSource(source);\n\n  loadSingleFontAsync(fontFamily, asset);\n}\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,mBAAmB,KAAQ,mBAAmB,CAEnE,MAAO,CAAAC,cAAc,wBAErB,OAASC,iBAAiB,CAAEC,mBAAmB,oBAM/C,MAAM,SAAU,CAAAC,kBAAkBA,CAAA,EAChC,GAAI,CAACH,cAAc,CAACG,kBAAkB,CAAE,CACtC,KAAM,IAAI,CAAAJ,mBAAmB,CAAC,WAAW,CAAE,oBAAoB,CAAC,CAClE,CACA,MAAO,CAAAC,cAAc,CAACG,kBAAkB,EAAE,CAC5C,CAMA,MAAM,SAAU,CAAAC,kBAAkBA,CAAA,EAChC,GAAI,CAACJ,cAAc,CAACI,kBAAkB,CAAE,CACtC,KAAM,IAAI,CAAAL,mBAAmB,CAAC,WAAW,CAAE,oBAAoB,CAAC,CAClE,CACA,MAAO,CAAAC,cAAc,CAACI,kBAAkB,EAAE,CAC5C,CAEA,MAAM,SAAU,CAAAC,kBAAkBA,CAACC,UAAkB,CAAEC,MAA0B,EAE/E,GAAI,CAACA,MAAM,CAAE,CACX,KAAM,IAAI,CAAAT,UAAU,qEAE+BQ,UAAU,QAAMC,MAAM,sEAAsED,UAAU,KAAG,CAC3J,CACH,CACA,GAAM,CAAAE,KAAK,CAAGP,iBAAiB,CAACM,MAAM,CAAC,CAEvCL,mBAAmB,CAACI,UAAU,CAAEE,KAAK,CAAC,CACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}