{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _callSuper(t,o,e){return o=_getPrototypeOf(o),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],_getPrototypeOf(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}import invariant from'invariant';import{adapt}from\"../core/AnimatedBlock\";import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";var AnimatedCond=function(_AnimatedNode){function AnimatedCond(condition,ifBlock,elseBlock){var _this;_classCallCheck(this,AnimatedCond);invariant(condition instanceof AnimatedNode,\"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \"+condition);invariant(ifBlock instanceof AnimatedNode,\"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \"+ifBlock);invariant(elseBlock instanceof AnimatedNode||elseBlock===undefined,\"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \"+elseBlock);_this=_callSuper(this,AnimatedCond,[{type:'cond',cond:condition,ifBlock:ifBlock,elseBlock:elseBlock},[condition,ifBlock,elseBlock]]);_this._condition=condition;_this._ifBlock=ifBlock;_this._elseBlock=elseBlock;return _this;}_inherits(AnimatedCond,_AnimatedNode);return _createClass(AnimatedCond,[{key:\"toString\",value:function toString(){return\"AnimatedCond, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){if(val(this._condition)){return val(this._ifBlock);}else{return this._elseBlock!==undefined?val(this._elseBlock):undefined;}}}]);}(AnimatedNode);export function createAnimatedCond(cond,ifBlock,elseBlock){return new AnimatedCond(adapt(cond),adapt(ifBlock),elseBlock===undefined?undefined:adapt(elseBlock));}","map":{"version":3,"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","_AnimatedNode","condition","ifBlock","elseBlock","_this","_classCallCheck","undefined","_callSuper","type","cond","_condition","_ifBlock","_elseBlock","_inherits","_createClass","key","value","toString","__nodeID","__onEvaluate","createAnimatedCond"],"sources":["C:/Users/sumanth/Downloads/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"sourcesContent":["import invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"],"mappings":"wuBAAA,MAAO,CAAAA,SAAS,KAAM,WAAW,CACjC,OAASC,KAAK,6BACd,OAASC,GAAG,cACZ,MAAO,CAAAC,YAAY,sBAAuB,GAEpC,CAAAC,YAAY,UAAAC,aAAA,EAKhB,SAAAD,aAAYE,SAAS,CAAEC,OAAO,CAAEC,SAAS,CAAE,KAAAC,KAAA,CAAAC,eAAA,MAAAN,YAAA,EACzCJ,SAAS,CACPM,SAAS,WAAY,CAAAH,YAAY,yFACuDG,SAC1F,CAAC,CACDN,SAAS,CACPO,OAAO,WAAY,CAAAJ,YAAY,0FAC0DI,OAC3F,CAAC,CACDP,SAAS,CACPQ,SAAS,WAAY,CAAAL,YAAY,EAAIK,SAAS,GAAKG,SAAS,gHACmDH,SACjH,CAAC,CACDC,KAAA,CAAAG,UAAA,MAAAR,YAAA,EACE,CACES,IAAI,CAAE,MAAM,CACZC,IAAI,CAAER,SAAS,CACfC,OAAO,CAAPA,OAAO,CACPC,SAAS,CAATA,SACF,CAAC,CACD,CAACF,SAAS,CAAEC,OAAO,CAAEC,SAAS,CAAC,GAEjCC,KAAA,CAAKM,UAAU,CAAGT,SAAS,CAC3BG,KAAA,CAAKO,QAAQ,CAAGT,OAAO,CACvBE,KAAA,CAAKQ,UAAU,CAAGT,SAAS,CAAC,OAAAC,KAAA,CAC9B,CAACS,SAAA,CAAAd,YAAA,CAAAC,aAAA,SAAAc,YAAA,CAAAf,YAAA,GAAAgB,GAAA,YAAAC,KAAA,CAED,SAAAC,QAAQA,CAAA,CAAG,CACT,2BAA4B,IAAI,CAACC,QAAQ,CAC3C,CAAC,GAAAH,GAAA,gBAAAC,KAAA,CAED,SAAAG,YAAYA,CAAA,CAAG,CACb,GAAItB,GAAG,CAAC,IAAI,CAACa,UAAU,CAAC,CAAE,CACxB,MAAO,CAAAb,GAAG,CAAC,IAAI,CAACc,QAAQ,CAAC,CAC3B,CAAC,IAAM,CACL,MAAO,KAAI,CAACC,UAAU,GAAKN,SAAS,CAAGT,GAAG,CAAC,IAAI,CAACe,UAAU,CAAC,CAAGN,SAAS,CACzE,CACF,CAAC,MA1CwBR,YAAY,EA6CvC,MAAO,SAAS,CAAAsB,kBAAkBA,CAACX,IAAI,CAAEP,OAAO,CAAEC,SAAS,CAAE,CAC3D,MAAO,IAAI,CAAAJ,YAAY,CACrBH,KAAK,CAACa,IAAI,CAAC,CACXb,KAAK,CAACM,OAAO,CAAC,CACdC,SAAS,GAAKG,SAAS,CAAGA,SAAS,CAAGV,KAAK,CAACO,SAAS,CACvD,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}