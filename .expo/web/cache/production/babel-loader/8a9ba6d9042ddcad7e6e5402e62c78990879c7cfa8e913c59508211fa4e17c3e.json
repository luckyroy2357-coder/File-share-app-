{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _callSuper(t,o,e){return o=_getPrototypeOf(o),_possibleConstructorReturn(t,_isNativeReflectConstruct()?Reflect.construct(o,e||[],_getPrototypeOf(t).constructor):o.apply(t,e));}function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));}catch(t){}return(_isNativeReflectConstruct=function _isNativeReflectConstruct(){return!!t;})();}import invariant from'invariant';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{val}from\"../val\";import{adapt,createAnimatedBlock as block}from\"./AnimatedBlock\";import{createAnimatedCall as call}from\"./AnimatedCall\";import AnimatedNode from\"./AnimatedNode\";var AnimatedDebug=function(_AnimatedNode){function AnimatedDebug(message,value){var _this;_classCallCheck(this,AnimatedDebug);invariant(typeof message==='string',\"Reanimated: Animated.debug node first argument should be of type string but got \"+message);invariant(value instanceof AnimatedNode,\"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \"+value);_this=_callSuper(this,AnimatedDebug,[{type:'debug',message:message,value:value},[value]]);_this._message=message;_this._value=value;return _this;}_inherits(AnimatedDebug,_AnimatedNode);return _createClass(AnimatedDebug,[{key:\"toString\",value:function toString(){return\"AnimatedDebug, id: \"+this.__nodeID;}},{key:\"__onEvaluate\",value:function __onEvaluate(){var value=val(this._value);console.log(this._message,value);return value;}}]);}(AnimatedNode);export function createAnimatedDebug(message,value){if(__DEV__){var _NativeModules$Native,_NativeModules$Native2,_NativeModules$Native3;var runningInRemoteDebugger=typeof atob!=='undefined';var runningInExpoShell=((_NativeModules$Native=NativeModules.NativeUnimoduleProxy)==null?void 0:(_NativeModules$Native2=_NativeModules$Native.modulesConstants)==null?void 0:(_NativeModules$Native3=_NativeModules$Native2.ExponentConstants)==null?void 0:_NativeModules$Native3.executionEnvironment)==='storeClient';if(runningInRemoteDebugger||runningInExpoShell){return block([call([value],function(_ref){var _ref2=_slicedToArray(_ref,1),a=_ref2[0];return console.log(message+\" \"+a);}),value]);}else{return new AnimatedDebug(message,adapt(value));}}return value;}","map":{"version":3,"names":["invariant","NativeModules","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","_AnimatedNode","message","value","_this","_classCallCheck","_callSuper","type","_message","_value","_inherits","_createClass","key","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","_NativeModules$Native","_NativeModules$Native2","_NativeModules$Native3","runningInRemoteDebugger","atob","runningInExpoShell","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","_ref","_ref2","_slicedToArray","a"],"sources":["C:/Users/sumanth/Downloads/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"],"mappings":"yyBAAA,MAAO,CAAAA,SAAS,KAAM,WAAW,CAAC,OAAAC,aAAA,mDAElC,OAASC,GAAG,cACZ,OAASC,KAAK,CAAEC,mBAAmB,GAAI,CAAAC,KAAK,uBAC5C,OAASC,kBAAkB,GAAI,CAAAC,IAAI,sBACnC,MAAO,CAAAC,YAAY,sBAAuB,GAEpC,CAAAC,aAAa,UAAAC,aAAA,EAIjB,SAAAD,cAAYE,OAAO,CAAEC,KAAK,CAAE,KAAAC,KAAA,CAAAC,eAAA,MAAAL,aAAA,EAC1BT,SAAS,CACP,MAAO,CAAAW,OAAO,GAAK,QAAQ,oFACwDA,OACrF,CAAC,CACDX,SAAS,CACPY,KAAK,WAAY,CAAAJ,YAAY,2FAC6DI,KAC5F,CAAC,CACDC,KAAA,CAAAE,UAAA,MAAAN,aAAA,EAAM,CAAEO,IAAI,CAAE,OAAO,CAAEL,OAAO,CAAPA,OAAO,CAAEC,KAAK,CAALA,KAAM,CAAC,CAAE,CAACA,KAAK,CAAC,GAChDC,KAAA,CAAKI,QAAQ,CAAGN,OAAO,CACvBE,KAAA,CAAKK,MAAM,CAAGN,KAAK,CAAC,OAAAC,KAAA,CACtB,CAACM,SAAA,CAAAV,aAAA,CAAAC,aAAA,SAAAU,YAAA,CAAAX,aAAA,GAAAY,GAAA,YAAAT,KAAA,CAED,SAAAU,QAAQA,CAAA,CAAG,CACT,4BAA6B,IAAI,CAACC,QAAQ,CAC5C,CAAC,GAAAF,GAAA,gBAAAT,KAAA,CAED,SAAAY,YAAYA,CAAA,CAAG,CACb,GAAM,CAAAZ,KAAK,CAAGV,GAAG,CAAC,IAAI,CAACgB,MAAM,CAAC,CAC9BO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,QAAQ,CAAEL,KAAK,CAAC,CACjC,MAAO,CAAAA,KAAK,CACd,CAAC,MA1ByBJ,YAAY,EA6BxC,MAAO,SAAS,CAAAmB,mBAAmBA,CAAChB,OAAO,CAAEC,KAAK,CAAE,CAClD,GAAIgB,OAAO,CAAE,KAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAGX,GAAM,CAAAC,uBAAuB,CAAG,MAAO,CAAAC,IAAI,GAAK,WAAW,CAI3D,GAAM,CAAAC,kBAAkB,CACtB,EAAAL,qBAAA,CAAA5B,aAAa,CAACkC,oBAAoB,gBAAAL,sBAAA,CAAlCD,qBAAA,CAAoCO,gBAAgB,gBAAAL,sBAAA,CAApDD,sBAAA,CAAsDO,iBAAiB,eAAvEN,sBAAA,CACIO,oBAAoB,IAAK,aAAa,CAE5C,GAAIN,uBAAuB,EAAIE,kBAAkB,CAAE,CAGjD,MAAO,CAAA7B,KAAK,CAAC,CACXE,IAAI,CAAC,CAACK,KAAK,CAAC,CAAE,SAAA2B,IAAA,MAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAEG,CAAC,CAAAF,KAAA,UAAM,CAAAf,OAAO,CAACC,GAAG,CAAIf,OAAO,KAAI+B,CAAG,CAAC,GAAC,CACtD9B,KAAK,CACN,CAAC,CACJ,CAAC,IAAM,CACL,MAAO,IAAI,CAAAH,aAAa,CAACE,OAAO,CAAER,KAAK,CAACS,KAAK,CAAC,CAAC,CACjD,CACF,CAEA,MAAO,CAAAA,KAAK,CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}