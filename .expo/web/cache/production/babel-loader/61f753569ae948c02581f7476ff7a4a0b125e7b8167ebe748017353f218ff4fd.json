{"ast":null,"code":"import ExpoFontLoader from\"./ExpoFontLoader\";export var loadPromises={};var cache={};export function markLoaded(fontFamily){cache[fontFamily]=true;}export function isLoadedInCache(fontFamily){return fontFamily in cache;}export function isLoadedNative(fontFamily){if(isLoadedInCache(fontFamily)){return true;}else{var loadedNativeFonts=ExpoFontLoader.getLoadedFonts();if(!(loadedNativeFonts!=null&&loadedNativeFonts.length)){return false;}loadedNativeFonts.forEach(function(font){cache[font]=true;});return fontFamily in cache;}}export function purgeFontFamilyFromCache(fontFamily){delete cache[fontFamily];}export function purgeCache(){cache={};}","map":{"version":3,"names":["ExpoFontLoader","loadPromises","cache","markLoaded","fontFamily","isLoadedInCache","isLoadedNative","loadedNativeFonts","getLoadedFonts","length","forEach","font","purgeFontFamilyFromCache","purgeCache"],"sources":["C:\\Users\\sumanth\\Downloads\\app\\node_modules\\expo-font\\src\\memory.ts"],"sourcesContent":["import ExpoFontLoader from './ExpoFontLoader';\n\nexport const loadPromises: { [name: string]: Promise<void> } = {};\n\n// cache the value on the js side for fast access to the fonts that are loaded\nlet cache: { [name: string]: boolean } = {};\n\nexport function markLoaded(fontFamily: string) {\n  cache[fontFamily] = true;\n}\n\nexport function isLoadedInCache(fontFamily: string): boolean {\n  return fontFamily in cache;\n}\n\nexport function isLoadedNative(fontFamily: string): boolean {\n  if (isLoadedInCache(fontFamily)) {\n    return true;\n  } else {\n    const loadedNativeFonts: string[] = ExpoFontLoader.getLoadedFonts();\n\n    // NOTE(brentvatne): Bail out here if there are no loaded fonts. This\n    // is functionally equivalent to the behavior below if the returned array\n    // is empty, but this handles improper mocking of `getLoadedFonts`.\n    if (!loadedNativeFonts?.length) {\n      return false;\n    }\n\n    loadedNativeFonts.forEach((font) => {\n      cache[font] = true;\n    });\n    return fontFamily in cache;\n  }\n}\n\nexport function purgeFontFamilyFromCache(fontFamily: string): void {\n  delete cache[fontFamily];\n}\n\nexport function purgeCache(): void {\n  cache = {};\n}\n"],"mappings":"AAAA,MAAO,CAAAA,cAAc,wBAErB,MAAO,IAAM,CAAAC,YAAY,CAAsC,EAAE,CAGjE,GAAI,CAAAC,KAAK,CAAgC,EAAE,CAE3C,MAAM,SAAU,CAAAC,UAAUA,CAACC,UAAkB,EAC3CF,KAAK,CAACE,UAAU,CAAC,CAAG,IAAI,CAC1B,CAEA,MAAM,SAAU,CAAAC,eAAeA,CAACD,UAAkB,EAChD,MAAO,CAAAA,UAAU,GAAI,CAAAF,KAAK,CAC5B,CAEA,MAAM,SAAU,CAAAI,cAAcA,CAACF,UAAkB,EAC/C,GAAIC,eAAe,CAACD,UAAU,CAAC,CAAE,CAC/B,MAAO,KAAI,CACb,CAAC,IAAM,CACL,GAAM,CAAAG,iBAAiB,CAAaP,cAAc,CAACQ,cAAc,EAAE,CAKnE,GAAI,EAACD,iBAAiB,QAAjBA,iBAAiB,CAAEE,MAAM,EAAE,CAC9B,MAAO,MAAK,CACd,CAEAF,iBAAiB,CAACG,OAAO,CAAC,SAACC,IAAI,CAAI,CACjCT,KAAK,CAACS,IAAI,CAAC,CAAG,IAAI,CACpB,CAAC,CAAC,CACF,MAAO,CAAAP,UAAU,GAAI,CAAAF,KAAK,CAC5B,CACF,CAEA,MAAM,SAAU,CAAAU,wBAAwBA,CAACR,UAAkB,EACzD,MAAO,CAAAF,KAAK,CAACE,UAAU,CAAC,CAC1B,CAEA,MAAM,SAAU,CAAAS,UAAUA,CAAA,EACxBX,KAAK,CAAG,EAAE,CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}