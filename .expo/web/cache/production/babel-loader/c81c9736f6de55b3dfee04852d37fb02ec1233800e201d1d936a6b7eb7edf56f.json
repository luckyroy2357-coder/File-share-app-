{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{Button,Text}from'react-native-paper';import*as DocumentPicker from'expo-document-picker';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function UploadPdfScreen(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),fileName=_useState2[0],setFileName=_useState2[1];var pick=function(){var _ref=_asyncToGenerator(function*(){var res=yield DocumentPicker.getDocumentAsync({type:'application/pdf'});if(res.type==='success')setFileName(res.name);});return function pick(){return _ref.apply(this,arguments);};}();return _jsxs(View,{style:styles.container,children:[_jsx(Button,{mode:\"outlined\",onPress:pick,style:{marginBottom:12},children:\"Select PDF\"}),_jsx(Text,{children:fileName!=null?fileName:'No file selected'}),_jsx(Button,{mode:\"contained\",style:{marginTop:12},onPress:function onPress(){return alert('Upload stub');},children:\"Upload (stub)\"})]});}var styles=StyleSheet.create({container:{flex:1,padding:16}});","map":{"version":3,"names":["React","useState","View","StyleSheet","Button","Text","DocumentPicker","jsx","_jsx","jsxs","_jsxs","UploadPdfScreen","_useState","_useState2","_slicedToArray","fileName","setFileName","pick","_ref","_asyncToGenerator","res","getDocumentAsync","type","name","apply","arguments","style","styles","container","children","mode","onPress","marginBottom","marginTop","alert","create","flex","padding"],"sources":["C:/Users/sumanth/Downloads/app/src/screens/UploadPdfScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport { Button, Text } from 'react-native-paper';\r\nimport * as DocumentPicker from 'expo-document-picker';\r\n\r\nexport default function UploadPdfScreen() {\r\n  const [fileName, setFileName] = useState<string | null>(null);\r\n\r\n  const pick = async () => {\r\n    const res = await DocumentPicker.getDocumentAsync({ type: 'application/pdf' });\r\n    if (res.type === 'success') setFileName(res.name);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button mode=\"outlined\" onPress={pick} style={{ marginBottom: 12 }}>\r\n        Select PDF\r\n      </Button>\r\n      <Text>{fileName ?? 'No file selected'}</Text>\r\n      <Button mode=\"contained\" style={{ marginTop: 12 }} onPress={() => alert('Upload stub')}>\r\n        Upload (stub)\r\n      </Button>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({ container: { flex: 1, padding: 16 } });\r\n"],"mappings":"wIAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,IAAA,iDAAAC,UAAA,gDAExC,OAASC,MAAM,CAAEC,IAAI,KAAQ,oBAAoB,CACjD,MAAO,GAAK,CAAAC,cAAc,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvD,cAAe,SAAS,CAAAC,eAAeA,CAAA,CAAG,CACxC,IAAAC,SAAA,CAAgCX,QAAQ,CAAgB,IAAI,CAAC,CAAAY,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAtDG,QAAQ,CAAAF,UAAA,IAAEG,WAAW,CAAAH,UAAA,IAE5B,GAAM,CAAAI,IAAI,gBAAAC,IAAA,CAAAC,iBAAA,CAAG,WAAY,CACvB,GAAM,CAAAC,GAAG,MAAS,CAAAd,cAAc,CAACe,gBAAgB,CAAC,CAAEC,IAAI,CAAE,iBAAkB,CAAC,CAAC,CAC9E,GAAIF,GAAG,CAACE,IAAI,GAAK,SAAS,CAAEN,WAAW,CAACI,GAAG,CAACG,IAAI,CAAC,CACnD,CAAC,iBAHK,CAAAN,IAAIA,CAAA,SAAAC,IAAA,CAAAM,KAAA,MAAAC,SAAA,OAGT,CAED,MACE,CAAAf,KAAA,CAACR,IAAI,EAACwB,KAAK,CAAEC,MAAM,CAACC,SAAU,CAAAC,QAAA,EAC5BrB,IAAA,CAACJ,MAAM,EAAC0B,IAAI,CAAC,UAAU,CAACC,OAAO,CAAEd,IAAK,CAACS,KAAK,CAAE,CAAEM,YAAY,CAAE,EAAG,CAAE,CAAAH,QAAA,CAAC,YAEpE,CAAQ,CAAC,CACTrB,IAAA,CAACH,IAAI,EAAAwB,QAAA,CAAEd,QAAQ,OAARA,QAAQ,CAAI,kBAAkB,CAAO,CAAC,CAC7CP,IAAA,CAACJ,MAAM,EAAC0B,IAAI,CAAC,WAAW,CAACJ,KAAK,CAAE,CAAEO,SAAS,CAAE,EAAG,CAAE,CAACF,OAAO,CAAE,QAAT,CAAAA,OAAOA,CAAA,QAAQ,CAAAG,KAAK,CAAC,aAAa,CAAC,EAAC,CAAAL,QAAA,CAAC,eAExF,CAAQ,CAAC,EACL,CAAC,CAEX,CAEA,GAAM,CAAAF,MAAM,CAAGxB,UAAU,CAACgC,MAAM,CAAC,CAAEP,SAAS,CAAE,CAAEQ,IAAI,CAAE,CAAC,CAAEC,OAAO,CAAE,EAAG,CAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}