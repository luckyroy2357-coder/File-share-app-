{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{UnavailabilityError}from'expo-modules-core';import processColor from\"react-native-web/dist/exports/processColor\";import ExpoFontUtils from\"./ExpoFontUtils\";export function renderToImageAsync(_x,_x2){return _renderToImageAsync.apply(this,arguments);}function _renderToImageAsync(){_renderToImageAsync=_asyncToGenerator(function*(glyphs,options){if(!ExpoFontUtils){throw new UnavailabilityError('expo-font','ExpoFontUtils.renderToImageAsync');}return yield ExpoFontUtils.renderToImageAsync(glyphs,_objectSpread(_objectSpread({},options),{},{color:options!=null&&options.color?processColor(options.color):undefined}));});return _renderToImageAsync.apply(this,arguments);}","map":{"version":3,"names":["UnavailabilityError","processColor","ExpoFontUtils","renderToImageAsync","_x","_x2","_renderToImageAsync","apply","arguments","_asyncToGenerator","glyphs","options","_objectSpread","color","undefined"],"sources":["C:\\Users\\sumanth\\Downloads\\app\\node_modules\\expo-font\\src\\FontUtils.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { processColor } from 'react-native';\n\nimport ExpoFontUtils from './ExpoFontUtils';\nimport type { RenderToImageOptions, RenderToImageResult } from './FontUtils.types';\n\nexport type { RenderToImageOptions, RenderToImageResult };\n\n/**\n * Creates an image with provided text.\n * @param glyphs Text to be exported.\n * @param options RenderToImageOptions.\n * @return Promise which fulfils with uri to image.\n * @platform android\n * @platform ios\n */\nexport async function renderToImageAsync(\n  glyphs: string,\n  options?: RenderToImageOptions\n): Promise<RenderToImageResult> {\n  if (!ExpoFontUtils) {\n    throw new UnavailabilityError('expo-font', 'ExpoFontUtils.renderToImageAsync');\n  }\n\n  return await ExpoFontUtils.renderToImageAsync(glyphs, {\n    ...options,\n    color: options?.color ? processColor(options.color) : undefined,\n  });\n}\n"],"mappings":"svBAAA,OAASA,mBAAmB,KAAQ,mBAAmB,CAAC,OAAAC,YAAA,kDAGxD,MAAO,CAAAC,aAAa,uBAapB,eAAsB,CAAAC,kBAAkBA,CAAAC,EAAA,CAAAC,GAAA,SAAAC,mBAAA,CAAAC,KAAA,MAAAC,SAAA,GAYvC,SAAAF,oBAAA,EAAAA,mBAAA,CAAAG,iBAAA,CAZM,UACLC,MAAc,CACdC,OAA8B,EAE9B,GAAI,CAACT,aAAa,CAAE,CAClB,KAAM,IAAI,CAAAF,mBAAmB,CAAC,WAAW,CAAE,kCAAkC,CAAC,CAChF,CAEA,YAAa,CAAAE,aAAa,CAACC,kBAAkB,CAACO,MAAM,CAAAE,aAAA,CAAAA,aAAA,IAC/CD,OAAO,MACVE,KAAK,CAAEF,OAAO,QAAPA,OAAO,CAAEE,KAAK,CAAGZ,YAAY,CAACU,OAAO,CAACE,KAAK,CAAC,CAAGC,SAAS,EAChE,CAAC,CACJ,CAAC,SAAAR,mBAAA,CAAAC,KAAA,MAAAC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}